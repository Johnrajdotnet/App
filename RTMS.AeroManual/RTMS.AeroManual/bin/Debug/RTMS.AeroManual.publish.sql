/*
Deployment script for RTMS.Aero.Demo1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "RTMS.Aero.Demo1"
:setvar DefaultFilePrefix "RTMS.Aero.Demo1"
:setvar DefaultDataPath "D:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "D:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [CollectTM]...';


GO
CREATE SCHEMA [CollectTM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [SyncTM]...';


GO
CREATE SCHEMA [SyncTM]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [TManual]...';


GO
CREATE SCHEMA [TManual]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [TManual].[OT_Manual_EIPC_Details]...';


GO
CREATE TABLE [TManual].[OT_Manual_EIPC_Details] (
    [Id]                  BIGINT         IDENTITY (1, 1) NOT NULL,
    [PublicationManualId] BIGINT         NOT NULL,
    [FigOrItemNumber]     NVARCHAR (50)  NOT NULL,
    [PartNumber]          NVARCHAR (50)  NULL,
    [Nomenclature]        NVARCHAR (200) NULL,
    [UnitPerAssy]         INT            NULL,
    [Active]              BIT            NOT NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [ModifiedDate]        DATETIME       NULL,
    CONSTRAINT [PK_OT_Manual_Effectivity_Details] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [TManual].[OT_Manual_Information_Details]...';


GO
CREATE TABLE [TManual].[OT_Manual_Information_Details] (
    [Id]                    BIGINT         IDENTITY (1, 1) NOT NULL,
    [PublicationNodeId]     BIGINT         NOT NULL,
    [TitleName]             NVARCHAR (300) NULL,
    [ATANumber]             NVARCHAR (50)  NOT NULL,
    [Classification]        NVARCHAR (50)  NULL,
    [RepairSchemeNumber]    NVARCHAR (50)  NULL,
    [EffectivityEngineMark] NVARCHAR (MAX) NULL,
    [CreatedDate]           DATETIME       NOT NULL,
    [ModifiedDate]          DATETIME       NULL,
    CONSTRAINT [PK_OT_Publication_Manual_Details] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [TManual].[ST_Publication_Node_Details]...';


GO
CREATE TABLE [TManual].[ST_Publication_Node_Details] (
    [Id]                  BIGINT         IDENTITY (1, 1) NOT NULL,
    [EnginePublicationId] INT            NOT NULL,
    [ChapterLevel]        NVARCHAR (200) NULL,
    [SectionLevel]        NVARCHAR (200) NULL,
    [PageBlockLevelName]  NVARCHAR (200) NULL,
    [FunctionalCode]      INT            NULL,
    [TaskLevelNumber]     NVARCHAR (200) NOT NULL,
    [TaskLevelName]       NVARCHAR (200) NULL,
    [SequenceNumber]      INT            NOT NULL,
    [IsDrawingAvailable]  BIT            NOT NULL,
    [IssueDate]           DATETIME       NULL,
    [SyncDate]            DATETIME       NULL,
    [SyncStatus]          NVARCHAR (50)  NOT NULL,
    [SequenceOrder]       INT            NOT NULL,
    [Active]              BIT            NULL,
    [CreatedDate]         DATETIME       NOT NULL,
    [ModifiedDate]        DATETIME       NULL,
    CONSTRAINT [PK_ST_Builder_Publication_Node_Details] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [TManual].[ST_Engine_Publication_Details]...';


GO
CREATE TABLE [TManual].[ST_Engine_Publication_Details] (
    [Id]                           BIGINT         IDENTITY (1, 1) NOT NULL,
    [EngineTypeId]                 INT            NOT NULL,
    [EngineSeriesId]               BIGINT         NOT NULL,
    [EngineMarkId]                 BIGINT         NOT NULL,
    [EnginePublicationShotName]    NVARCHAR (50)  NULL,
    [EnginePublicationLongName]    NVARCHAR (200) NOT NULL,
    [EnginePublicationDescription] NVARCHAR (500) NULL,
    [IssueDate]                    DATETIME       NULL,
    [SyncDate]                     DATETIME       NULL,
    [SyncStatus]                   NVARCHAR (50)  NULL,
    [SequenceOrder]                INT            NOT NULL,
    [Active]                       BIT            NOT NULL,
    [CreatedDate]                  DATETIME       NOT NULL,
    [ModifiedDate]                 DATETIME       NULL,
    CONSTRAINT [PK_ST_Engine_Publication_Details] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [TManual].[ST_Engine_Mark_Type]...';


GO
CREATE TABLE [TManual].[ST_Engine_Mark_Type] (
    [Id]                    BIGINT         IDENTITY (1, 1) NOT NULL,
    [EngineSeriesTypeId]    BIGINT         NOT NULL,
    [EngineMarkName]        NVARCHAR (50)  NOT NULL,
    [EngineMarkDescription] NVARCHAR (200) NOT NULL,
    [EPublicationTitleName] NVARCHAR (200) NULL,
    [SyncDate]              DATETIME       NULL,
    [SyncStatus]            NVARCHAR (50)  NULL,
    [SequenceOrder]         INT            NOT NULL,
    [Active]                BIT            NOT NULL,
    [CreatedDate]           DATETIME       NOT NULL,
    [ModifiedDate]          DATETIME       NULL,
    CONSTRAINT [PK_ST_Engine_Mark_Type] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [TManual].[ST_Engine_Series_Type]...';


GO
CREATE TABLE [TManual].[ST_Engine_Series_Type] (
    [Id]                      BIGINT         IDENTITY (1, 1) NOT NULL,
    [EngineTypeId]            INT            NOT NULL,
    [EngineSeriesName]        NVARCHAR (50)  NOT NULL,
    [EngineSeriesDescription] NVARCHAR (200) NOT NULL,
    [EngineMarkPageTitle]     NVARCHAR (200) NOT NULL,
    [IssueDate]               DATETIME       NULL,
    [SyncDate]                DATETIME       NULL,
    [SyncStatus]              NVARCHAR (50)  NULL,
    [SequenceOrder]           INT            NOT NULL,
    [Active]                  BIT            NOT NULL,
    [CreatedDate]             DATETIME       NOT NULL,
    [ModifiedDate]            DATETIME       NULL,
    CONSTRAINT [PK_ST_Engine_Series_Type] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [TManual].[ST_Engine_Type]...';


GO
CREATE TABLE [TManual].[ST_Engine_Type] (
    [Id]                INT            IDENTITY (1, 1) NOT NULL,
    [EngineName]        NVARCHAR (50)  NOT NULL,
    [EngineDescription] NVARCHAR (200) NOT NULL,
    [SequenceOrder]     INT            NOT NULL,
    [Active]            BIT            NOT NULL,
    [CreatedDate]       DATETIME       NOT NULL,
    [ModifiedDate]      DATETIME       NULL,
    CONSTRAINT [PK_ST_Engine_Type] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[DatabaseLog]...';


GO
CREATE TABLE [dbo].[DatabaseLog] (
    [DatabaseLogID] INT            IDENTITY (1, 1) NOT NULL,
    [PostTime]      DATETIME       NOT NULL,
    [DatabaseUser]  [sysname]      NOT NULL,
    [Event]         [sysname]      NOT NULL,
    [Schema]        [sysname]      NULL,
    [Object]        [sysname]      NULL,
    [TSQL]          NVARCHAR (MAX) NOT NULL,
    [XmlEvent]      XML            NOT NULL,
    CONSTRAINT [PK_DatabaseLog_DatabaseLogID] PRIMARY KEY NONCLUSTERED ([DatabaseLogID] ASC)
);


GO
PRINT N'Creating [dbo].[ErrorLog]...';


GO
CREATE TABLE [dbo].[ErrorLog] (
    [ErrorLogID]     INT             IDENTITY (1, 1) NOT NULL,
    [ErrorTime]      DATETIME        NOT NULL,
    [UserName]       [sysname]       NOT NULL,
    [ErrorNumber]    INT             NOT NULL,
    [ErrorSeverity]  INT             NULL,
    [ErrorState]     INT             NULL,
    [ErrorProcedure] NVARCHAR (126)  NULL,
    [ErrorLine]      INT             NULL,
    [ErrorMessage]   NVARCHAR (4000) NOT NULL,
    CONSTRAINT [PK_ErrorLog_ErrorLogID] PRIMARY KEY CLUSTERED ([ErrorLogID] ASC)
);


GO
PRINT N'Creating [dbo].[FeedbackDetails]...';


GO
CREATE TABLE [dbo].[FeedbackDetails] (
    [Id]           BIGINT           IDENTITY (1, 1) NOT NULL,
    [FeedbackData] NVARCHAR (MAX)   NOT NULL,
    [CreatedBy]    UNIQUEIDENTIFIER NOT NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    CONSTRAINT [PK_FeedbackDetails] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[RTMSBuildVersion]...';


GO
CREATE TABLE [dbo].[RTMSBuildVersion] (
    [SystemInformationID] TINYINT       IDENTITY (1, 1) NOT NULL,
    [Database Version]    NVARCHAR (25) NOT NULL,
    [VersionDate]         DATETIME      NOT NULL,
    [ModifiedDate]        DATETIME      NULL,
    CONSTRAINT [PK_AWBuildVersion_SystemInformationID] PRIMARY KEY CLUSTERED ([SystemInformationID] ASC)
);


GO
PRINT N'Creating [TManual].[DF_OT_Manual_Effectivity_Details_Active]...';


GO
ALTER TABLE [TManual].[OT_Manual_EIPC_Details]
    ADD CONSTRAINT [DF_OT_Manual_Effectivity_Details_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [TManual].[DF_OT_Manual_Effectivity_Details_CreatedDate]...';


GO
ALTER TABLE [TManual].[OT_Manual_EIPC_Details]
    ADD CONSTRAINT [DF_OT_Manual_Effectivity_Details_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [TManual].[DF_OT_Publication_Manual_Details_CreatedDate]...';


GO
ALTER TABLE [TManual].[OT_Manual_Information_Details]
    ADD CONSTRAINT [DF_OT_Publication_Manual_Details_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [TManual].[DF_ST_Publication_Node_Details_IsDrawingAvailable]...';


GO
ALTER TABLE [TManual].[ST_Publication_Node_Details]
    ADD CONSTRAINT [DF_ST_Publication_Node_Details_IsDrawingAvailable] DEFAULT ((1)) FOR [IsDrawingAvailable];


GO
PRINT N'Creating [TManual].[DF_ST_Publication_Node_Details_SyncStatus]...';


GO
ALTER TABLE [TManual].[ST_Publication_Node_Details]
    ADD CONSTRAINT [DF_ST_Publication_Node_Details_SyncStatus] DEFAULT (N'NotStarted') FOR [SyncStatus];


GO
PRINT N'Creating [TManual].[DF_ST_Builder_Publication_Node_Details_CreatedDate]...';


GO
ALTER TABLE [TManual].[ST_Publication_Node_Details]
    ADD CONSTRAINT [DF_ST_Builder_Publication_Node_Details_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [TManual].[DF_ST_Engine_Publication_Details_SyncStatus]...';


GO
ALTER TABLE [TManual].[ST_Engine_Publication_Details]
    ADD CONSTRAINT [DF_ST_Engine_Publication_Details_SyncStatus] DEFAULT (N'NotStarted') FOR [SyncStatus];


GO
PRINT N'Creating [TManual].[DF_ST_Engine_Publication_Details_Active]...';


GO
ALTER TABLE [TManual].[ST_Engine_Publication_Details]
    ADD CONSTRAINT [DF_ST_Engine_Publication_Details_Active] DEFAULT ((1)) FOR [Active];


GO
PRINT N'Creating [TManual].[DF_ST_Publication_Node_Details_CreatedDate]...';


GO
ALTER TABLE [TManual].[ST_Engine_Publication_Details]
    ADD CONSTRAINT [DF_ST_Publication_Node_Details_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [TManual].[DF_ST_Engine_Mark_Type_CreatedDate]...';


GO
ALTER TABLE [TManual].[ST_Engine_Mark_Type]
    ADD CONSTRAINT [DF_ST_Engine_Mark_Type_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [TManual].[DF_ST_Engine_Series_Type_CreatedDate]...';


GO
ALTER TABLE [TManual].[ST_Engine_Series_Type]
    ADD CONSTRAINT [DF_ST_Engine_Series_Type_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [TManual].[DF_ST_Engine_Type_CreatedDate]...';


GO
ALTER TABLE [TManual].[ST_Engine_Type]
    ADD CONSTRAINT [DF_ST_Engine_Type_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [dbo].[DF_ErrorLog_ErrorTime]...';


GO
ALTER TABLE [dbo].[ErrorLog]
    ADD CONSTRAINT [DF_ErrorLog_ErrorTime] DEFAULT (getdate()) FOR [ErrorTime];


GO
PRINT N'Creating [dbo].[DF_FeedbackDetails_CreatedDate]...';


GO
ALTER TABLE [dbo].[FeedbackDetails]
    ADD CONSTRAINT [DF_FeedbackDetails_CreatedDate] DEFAULT (getdate()) FOR [CreatedDate];


GO
PRINT N'Creating [TManual].[FK_OT_Manual_Effectivity_Details_OT_Publication_Manual_Details]...';


GO
ALTER TABLE [TManual].[OT_Manual_EIPC_Details]
    ADD CONSTRAINT [FK_OT_Manual_Effectivity_Details_OT_Publication_Manual_Details] FOREIGN KEY ([PublicationManualId]) REFERENCES [TManual].[OT_Manual_Information_Details] ([Id]);


GO
PRINT N'Creating [TManual].[FK_OT_Publication_Manual_Details_ST_Builder_Publication_Node_Details]...';


GO
ALTER TABLE [TManual].[OT_Manual_Information_Details]
    ADD CONSTRAINT [FK_OT_Publication_Manual_Details_ST_Builder_Publication_Node_Details] FOREIGN KEY ([PublicationNodeId]) REFERENCES [TManual].[ST_Publication_Node_Details] ([Id]);


GO
PRINT N'Creating [TManual].[FK_ST_Engine_Publication_Details_ST_Engine_Mark_Type]...';


GO
ALTER TABLE [TManual].[ST_Engine_Publication_Details]
    ADD CONSTRAINT [FK_ST_Engine_Publication_Details_ST_Engine_Mark_Type] FOREIGN KEY ([EngineMarkId]) REFERENCES [TManual].[ST_Engine_Mark_Type] ([Id]);


GO
PRINT N'Creating [TManual].[FK_ST_Engine_Publication_Details_ST_Engine_Series_Type]...';


GO
ALTER TABLE [TManual].[ST_Engine_Publication_Details]
    ADD CONSTRAINT [FK_ST_Engine_Publication_Details_ST_Engine_Series_Type] FOREIGN KEY ([EngineSeriesId]) REFERENCES [TManual].[ST_Engine_Series_Type] ([Id]);


GO
PRINT N'Creating [TManual].[FK_ST_Engine_Publication_Details_ST_Engine_Type]...';


GO
ALTER TABLE [TManual].[ST_Engine_Publication_Details]
    ADD CONSTRAINT [FK_ST_Engine_Publication_Details_ST_Engine_Type] FOREIGN KEY ([EngineTypeId]) REFERENCES [TManual].[ST_Engine_Type] ([Id]);


GO
PRINT N'Creating [TManual].[FK_ST_Engine_Mark_Type_ST_Engine_Series_Type]...';


GO
ALTER TABLE [TManual].[ST_Engine_Mark_Type]
    ADD CONSTRAINT [FK_ST_Engine_Mark_Type_ST_Engine_Series_Type] FOREIGN KEY ([EngineSeriesTypeId]) REFERENCES [TManual].[ST_Engine_Series_Type] ([Id]);


GO
PRINT N'Creating [TManual].[FK_ST_Engine_Series_Type_ST_Engine_Type1]...';


GO
ALTER TABLE [TManual].[ST_Engine_Series_Type]
    ADD CONSTRAINT [FK_ST_Engine_Series_Type_ST_Engine_Type1] FOREIGN KEY ([EngineTypeId]) REFERENCES [TManual].[ST_Engine_Type] ([Id]);


GO
PRINT N'Creating [dbo].[PrintError]...';


GO

-- uspPrintError prints error information about the error that caused 
-- execution to jump to the CATCH block of a TRY...CATCH construct. 
-- Should be executed from within the scope of a CATCH block otherwise 
-- it will return without printing any error information.
CREATE PROCEDURE [dbo].[PrintError] 
AS
BEGIN
    SET NOCOUNT ON;

    -- Print error information. 
    PRINT 'Error ' + CONVERT(varchar(50), ERROR_NUMBER()) +
          ', Severity ' + CONVERT(varchar(5), ERROR_SEVERITY()) +
          ', State ' + CONVERT(varchar(5), ERROR_STATE()) + 
          ', Procedure ' + ISNULL(ERROR_PROCEDURE(), '-') + 
          ', Line ' + CONVERT(varchar(5), ERROR_LINE());
    PRINT ERROR_MESSAGE();
END;
GO
PRINT N'Creating [dbo].[LogError]...';


GO

-- uspLogError logs error information in the ErrorLog table about the 
-- error that caused execution to jump to the CATCH block of a 
-- TRY...CATCH construct. This should be executed from within the scope 
-- of a CATCH block otherwise it will return without inserting error 
-- information. 
CREATE PROCEDURE [dbo].[LogError] 
    @errorLogID [int] = 0 OUTPUT -- contains the ErrorLogID of the row inserted
AS                               -- by uspLogError in the ErrorLog table
BEGIN
    SET NOCOUNT ON;

    -- Output parameter value of 0 indicates that error 
    -- information was not logged
    SET @errorLogID = 0;

    BEGIN TRY
        -- Return if there is no error information to log
        IF ERROR_NUMBER() IS NULL
            RETURN;

        -- Return if inside an uncommittable transaction.
        -- Data insertion/modification is not allowed when 
        -- a transaction is in an uncommittable state.
        IF XACT_STATE() = -1
        BEGIN
            PRINT 'Cannot log error since the current transaction is in an uncommittable state. ' 
                + 'Rollback the transaction before executing uspLogError in order to successfully log error information.';
            RETURN;
        END

        INSERT [dbo].[ErrorLog] 
            (
            [UserName], 
            [ErrorNumber], 
            [ErrorSeverity], 
            [ErrorState], 
            [ErrorProcedure], 
            [ErrorLine], 
            [ErrorMessage]
            ) 
        VALUES 
            (
            CONVERT(sysname, CURRENT_USER), 
            ERROR_NUMBER(),
            ERROR_SEVERITY(),
            ERROR_STATE(),
            ERROR_PROCEDURE(),
            ERROR_LINE(),
            ERROR_MESSAGE()
            );

        -- Pass back the ErrorLogID of the row inserted
        SET @errorLogID = @@IDENTITY;
    END TRY
    BEGIN CATCH
        PRINT 'An error occurred in stored procedure uspLogError: ';
        EXECUTE [dbo].[PrintError];
        RETURN -1;
    END CATCH
END;
GO
PRINT N'Creating [CollectTM].[GetPublicationNodeByPublication]...';


GO

-- =============================================
-- Author:		JohnRaj
-- Create date: 1/12/2018
-- Description:	Get All Node Publication
-- exec [CollectTM].[GetPublicationNodeByPublication] null
-- =============================================
CREATE PROCEDURE [CollectTM].[GetPublicationNodeByPublication] 
	-- Add the parameters for the stored procedure here
	@enginePublicationId bigint
AS
BEGIN TRY
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements. 
	SET NOCOUNT ON;

    -- Insert statements for procedure here

		SELECT 
			pn.Id as PublicationTaskNodeId,
		    pn.EnginePublicationId as EnginePublicationId,
			et.EngineName as EngineTypeName,
			es.EngineSeriesName as EngineSeriesName,
			em.EngineMarkName as EngineMarkName,
			es.EngineMarkPageTitle as EngineMarkPageTitle,
			em.EPublicationTitleName as EnginePublicationTitle,
			ep.EnginePublicationLongName as EnginePublicationLongName,
			ep.EnginePublicationShotName  as EnginePublicationShotName,
			pn.ChapterLevel as ChapterLevel,
			pn.SectionLevel as SectionLevel,
			pn.PageBlockLevelName as PageBlockLevelName,
			pn.FunctionalCode as FunctionalCode,
			pn.TaskLevelNumber as TaskLevelNumber,
			pn.TaskLevelName as TaskLevelName,
			em.EngineMarkName+' '+ep.EnginePublicationShotName+':' as TaskLevelPageTitle,
			pn.SequenceNumber as SequenceNumber,
			pn.IsDrawingAvailable as IsDrawingAvailable,
			pn.IssueDate as IssueDate,
			pn.SyncDate as SyncDate,
			pn.SyncStatus as SyncStatus,
			pn.Active as Active,
			pn.CreatedDate as CreatedDate,
			pn.ModifiedDate as ModifiedDate

	FROM [TManual].[ST_Publication_Node_Details]  pn
			INNER JOIN [TManual].ST_Engine_Publication_Details ep ON ep.Id = pn.EnginePublicationId
			INNER JOIN [TManual].ST_Engine_Mark_Type em ON em.Id = ep.EngineMarkId
			INNER JOIN [TManual].ST_Engine_Series_Type es ON es.Id = em.EngineSeriesTypeId
			INNER JOIN [TManual].ST_Engine_Type et ON et.Id = es.EngineTypeId
	WHERE	
			EnginePublicationId = ISNULL(@enginePublicationId, EnginePublicationId)	
			AND	pn.Active=1 AND em.Active =1 AND ep.Active =1 AND et.Active =1
            AND UPPER(ISNULL(pn.SyncStatus,'NotStarted'))='NotStarted'

END TRY
BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [CollectTM].[GetAllPublicationTaskNode]...';


GO

-- =============================================
-- Author:		Vyshna
-- Create date: 02/05/2018
-- Description:	Get All Node Publication
-- exec [CollectTM].[GetPublicationNodeForCollection] NULL,NULL,NULL
-- =============================================
CREATE PROCEDURE [CollectTM].[GetAllPublicationTaskNode] 
	-- Add the parameters for the stored procedure here
	@engineTypeId int,
	@engineSeriesId bigint,
	@engineMarkId bigint

AS

BEGIN TRY
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements. 
	SET NOCOUNT ON;

    -- Insert statements for procedure here	
	SELECT 
				pn.Id as PublicationTaskNodeId,
				pn.EnginePublicationId as EnginePublicationId,
				et.Id as EngineTypeId,
				es.Id as EngineSeriesId,
				em.Id as EngineMarkId,
				et.EngineName as EngineTypeName,
				es.EngineSeriesName as EngineSeriesName,
				em.EngineMarkName as EngineMarkName,
				es.EngineMarkPageTitle as EngineMarkPageTitle,
				em.EPublicationTitleName as EnginePublicationTitle,
				ep.EnginePublicationLongName as EnginePublicationLongName,
				ep.EnginePublicationShotName  as EnginePublicationShotName,
				pn.ChapterLevel as ChapterLevel,
				pn.SectionLevel as SectionLevel,
				pn.PageBlockLevelName as PageBlockLevelName,
				pn.FunctionalCode as FunctionalCode,
				pn.TaskLevelNumber as TaskLevelNumber,
				pn.TaskLevelName as TaskLevelName,
				em.EngineMarkName+' '+ep.EnginePublicationShotName+':' as TaskLevelPageTitle,
				pn.SequenceOrder as SequenceOrder,
				pn.IsDrawingAvailable as IsDrawingAvailable,
				pn.IssueDate as IssueDate,
				pn.SyncDate as SyncDate,
				pn.SyncStatus as SyncStatus,
				pn.Active as Active,
				pn.CreatedDate as CreatedDate,
				pn.ModifiedDate as ModifiedDate

	FROM        [TManual].[ST_Publication_Node_Details]  pn
			INNER JOIN [TManual].ST_Engine_Publication_Details ep ON ep.Id = pn.EnginePublicationId
			INNER JOIN [TManual].ST_Engine_Mark_Type em ON em.Id = ep.EngineMarkId
			INNER JOIN [TManual].ST_Engine_Series_Type es ON es.Id = em.EngineSeriesTypeId
			INNER JOIN [TManual].ST_Engine_Type et ON et.Id = es.EngineTypeId

	WHERE 
				(ep.EngineTypeId=(ISNULL(@engineTypeId, ep.EngineTypeId)) AND ep.EngineSeriesId=(ISNULL(@engineSeriesId, ep.EngineSeriesId))
			AND ep.EngineMarkId=(ISNULL(@engineMarkId, ep.EngineMarkId)))	
			AND UPPER(ISNULL(pn.SyncStatus,'NotStarted'))='NotStarted'
			AND	pn.Active=1 AND em.Active =1 AND ep.Active =1 AND et.Active =1
			AND pn.IsDrawingAvailable=1
	ORDER BY    ep.EngineTypeId,ep.EngineSeriesId,ep.EngineMarkId,ep.SequenceOrder,pn.SequenceOrder


END TRY
BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [SyncTM].[UpdateSyncDetailsForTM]...';


GO

-- =============================================
-- Author:		Arathy
-- Create date: 3/2/2018
-- Description:	Update data based flag value 
-- exec [SyncTM].[UpdateEngineDetails] 1,'EPublicationNode',InProgress,null
-- =============================================
CREATE PROCEDURE [SyncTM].[UpdateSyncDetailsForTM]
		@id                     int,
		@flag					nvarchar(50),
		@syncStatus				nvarchar(50),
		@issueDate				datetime

AS
BEGIN TRY
	
	IF(@flag = 'EngineSeries')   
	BEGIN

			UPDATE  [TManual].[ST_Engine_Series_Type]
			SET	    [SyncStatus] = @syncStatus,
				    [SyncDate] = GETDATE(),
					[IssueDate] =@issueDate
			WHERE   [Id] = @id	
	END
	ELSE IF(@flag = 'EPublication')
	BEGIN
			UPDATE  [TManual].[ST_Engine_Publication_Details]
			SET	    [SyncStatus] = @syncStatus,
				    [SyncDate] = GETDATE(),
					[IssueDate] =@issueDate
			WHERE   [Id] = @id	
			
	END
	ELSE IF(@flag = 'EPublicationNode')
	BEGIN
			UPDATE  [TManual].[ST_Publication_Node_Details]
			SET	    [SyncStatus] = @syncStatus,
				    [SyncDate] = GETDATE(),
					[IssueDate] =@issueDate
			WHERE   [Id] = @id		
	END
	
END TRY
BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [SyncTM].[GetEngineSeriesDetails]...';


GO

-- =============================================
-- Author:		JohnRaj
-- Create date: 1/12/2018
-- Description:	Get All Node Publication
-- exec [SyncTM].[GetEngineSeriesDetails] NULL
-- =============================================
CREATE PROCEDURE [SyncTM].[GetEngineSeriesDetails] 
	-- Add the parameters for the stored procedure here
	@engineTypeId int
AS

BEGIN TRY
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here

	     SELECT 
                es.Id as EngineSeriesId,
                es.EngineTypeId as EngineTypeId,
                et.EngineName as EngineName,
                es.EngineSeriesName as EngineSeriesName,
				es.EngineSeriesDescription as EngineSeriesDescription,
                es.EngineMarkPageTitle as EngineMarkPageTitle,
                es.IssueDate as IssueDate,
                es.SyncDate as SyncDate,
                es.SyncStatus as SyncStatus,
                es.Active    

        FROM [TManual].[ST_Engine_Series_Type] es
        INNER JOIN    [TManual].[ST_Engine_Type] et on  et.Id =es.EngineTypeId
        WHERE
            es.EngineTypeId=ISNULL(@engineTypeId,es.EngineTypeId)
			AND es.Active=1 
		ORDER BY 
			es.SequenceOrder

END TRY

BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [SyncTM].[GetEnginePublicationDetails]...';


GO

-- =============================================
-- Author:		Vyshna
-- Create date: 1/30/2018
-- Description:	Get All Engine Publication Details
-- exec [SyncTM].[GetEnginePublicationDetails] null,null,null
-- =============================================
CREATE PROCEDURE [SyncTM].[GetEnginePublicationDetails] 
	-- Add the parameters for the stored procedure here
	@engineTypeId int,
	@engineSeriesId bigint,
	@engineMarkId bigint

AS

BEGIN TRY
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here

	SELECT  
				ep.Id as EnginePublicationId,
				ep.EngineTypeId as EngineTypeId,
				ep.EngineSeriesId as EngineSeriesId,
		        ep.EngineMarkId as EngineMarkId,
				et.EngineName as EngineTypeName,
				es.EngineSeriesName as EngineSeriesName,
				em.EngineMarkName as EngineMarkName,				
				es.EngineMarkPageTitle as EngineMarkPageTitle,
				ep.EnginePublicationShotName as EnginePublicationShotName, 
			    ep.EnginePublicationLongName as EnginePublicationLongName,
			    ep.EnginePublicationDescription as EnginePublicationDescription,
				em.EPublicationTitleName as EnginePublicationTitle,
			    ep.IssueDate as IssueDate, 
			    ep.SyncDate as SyncDate, 
			    ep.SyncStatus as SyncStatus, 
			    ep.Active as Active, 
			    ep.CreatedDate as CreatedDate, 
			    ep.ModifiedDate as ModifiedDate
			
	FROM		[TManual].[ST_Engine_Publication_Details] ep	
			INNER JOIN [TManual].ST_Engine_Mark_Type em ON em.Id = ep.EngineMarkId
			INNER JOIN [TManual].ST_Engine_Series_Type es ON es.Id = em.EngineSeriesTypeId
			INNER JOIN [TManual].ST_Engine_Type et ON et.Id = es.EngineTypeId
	WHERE 		
				(ep.EngineTypeId=(ISNULL(@engineTypeId, ep.EngineTypeId)) 
			AND ep.EngineSeriesId=(ISNULL(@engineSeriesId, ep.EngineSeriesId))
			AND ep.EngineMarkId=(ISNULL(@engineMarkId, ep.EngineMarkId)))	
			AND UPPER(ISNULL(es.SyncStatus,'NotStarted'))='NotStarted'
			AND ep.Active=1 AND em.Active=1 AND es.Active=1 AND et.Active=1
	ORDER BY	ep.EngineTypeId,ep.EngineSeriesId,ep.EngineMarkId,ep.SequenceOrder

END TRY

BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [SyncTM].[GetEngineMarkDetails]...';


GO

-- =============================================
-- Author:		JohnRaj
-- Create date: 1/12/2018
-- Description:	Get All Node Publication
-- exec [SyncTM].[GetEngineMarkDetails] NULL
-- =============================================
CREATE PROCEDURE [SyncTM].[GetEngineMarkDetails] 
	-- Add the parameters for the stored procedure here
	@engineSeriesId bigint
AS

BEGIN TRY
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here

	SELECT 
			em.Id as EngineMarkId,
			et.Id as EngineTypeId,
			em.EngineSeriesTypeId as EngineSeriesTypeId,			
			em.EngineMarkName as EngineMarkName,
			et.EngineName as EngineTypeName,
			es.EngineSeriesName as EngineSeriesName,				
			es.EngineMarkPageTitle as EngineMarkPageTitle,
			em.EPublicationTitleName as EPublicationTitleName,
			em.EngineMarkDescription as EngineMarkDescription,
			em.Active    as Active 

	FROM	[TManual].[ST_Engine_Mark_Type] em
		INNER JOIN 	[TManual].[ST_Engine_Series_Type] es ON  es.Id =em.EngineSeriesTypeId
		INNER JOIN 	[TManual].[ST_Engine_Type] et ON  et.Id =es.EngineTypeId

	WHERE
			em.EngineSeriesTypeId=(ISNULL(@engineSeriesId, em.EngineSeriesTypeId))
		AND UPPER(ISNULL(es.SyncStatus,'NotStarted'))='NotStarted'
		AND em.Active=1 AND es.Active=1 AND et.Active =1

	ORDER BY es.EngineTypeId,em.EngineSeriesTypeId,es.SequenceOrder, em.SequenceOrder

END TRY

BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [SyncTM].[GetCountOfSyncDetails]...';


GO

-- =============================================
-- Author:		Vyshna
-- Create date: 2/15/2018
-- Description:	Get the count of Not started
-- sync status and current sync date
-- exec [SyncTM].[GetCountOfSyncInformation]
-- =============================================
CREATE PROCEDURE [SyncTM].[GetCountOfSyncDetails]
	-- Add the parameters for the stored procedure here
AS
BEGIN TRY
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
    -- Insert statements for procedure here
	DECLARE @syncStatusCountofES int ,@syncStatusCountofEM int, @syncStatusCountofEP int, @syncStatusCountofTaskNode int,
			@totalSyncStatusCount int, @syncDateCountofES int ,@syncDateofEM int, @syncDateofEP int, @syncDateofTaskNode int,
			@totalSyncDateCount int

	  BEGIN	
	  
		  SET @syncDateCountofES = (SELECT COUNT(SyncDate) FROM [TManual].ST_Engine_Series_Type  WHERE CAST(SyncDate AS date) = CAST(GETDATE() AS date));
		  SET @syncDateofEM = (SELECT COUNT(SyncDate) FROM [TManual].ST_Engine_Mark_Type  WHERE CAST(SyncDate AS date) = CAST(GETDATE() AS date));
		  SET @syncDateofEP = (SELECT COUNT(SyncDate) FROM [TManual].ST_Engine_Publication_Details  WHERE CAST(SyncDate AS date) = CAST(GETDATE() AS date));
		  SET @syncDateofTaskNode = (SELECT COUNT(SyncDate) FROM [TManual].ST_Publication_Node_Details  WHERE CAST(SyncDate AS date) = CAST(GETDATE() AS date));
		  SET @totalSyncDateCount = (@syncDateCountofES + @syncDateofEM + @syncDateofEP + @syncDateofTaskNode)
		   
		  SET @syncStatusCountofES = (SELECT COUNT(SyncStatus) FROM [TManual].ST_Engine_Series_Type  WHERE UPPER(SyncStatus) = 'NOTSTARTED');
		  SET @syncStatusCountofEM = (SELECT COUNT(SyncStatus) FROM [TManual].ST_Engine_Mark_Type  WHERE UPPER(SyncStatus) = 'NOTSTARTED');
		  SET @syncStatusCountofEP = (SELECT COUNT(SyncStatus) FROM [TManual].ST_Engine_Publication_Details  WHERE UPPER(SyncStatus) = 'NOTSTARTED');
		  SET @syncStatusCountofTaskNode = (SELECT COUNT(SyncStatus) FROM [TManual].ST_Publication_Node_Details  WHERE UPPER(SyncStatus) = 'NOTSTARTED');
		  SET @totalSyncStatusCount = (@syncStatusCountofES + @syncStatusCountofEM + @syncStatusCountofEP + @syncStatusCountofTaskNode)

		  SELECT @totalSyncDateCount AS TotalSyncDate, @totalSyncStatusCount AS TotalNotStartedSyncStatus;

	  END

END TRY

BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [TManual].[InsertEngineMarkDetails]...';


GO

-- =============================================
--PROCEDURE: [TManual].[InsertEngineMarkDetails] 
--PURPOSE: Insert engine mark data to [TManual].[ST_Engine_Mark_Type]
--CREATED: Vyshna P 01/30/2018
-- ============================================= 
CREATE PROCEDURE [TManual].[InsertEngineMarkDetails]
	@engineSeriesTypeId     bigint,
	@engineMarkName         nvarchar(50),  
	@engineMarkDescription  nvarchar(200)

AS
BEGIN TRY

	DECLARE @count bigint

	SET @count = (SELECT COUNT(*) FROM [TManual].[ST_Engine_Mark_Type] 
								  WHERE EngineSeriesTypeId=@engineSeriesTypeId)  
	IF(@count = 0)   
	BEGIN
			INSERT INTO [TManual].[ST_Engine_Mark_Type]
			(
				EngineSeriesTypeId,
				EngineMarkName,
				EngineMarkDescription
			)
			VALUES 
			(
				 @engineSeriesTypeId
				,@engineMarkName
				,@engineMarkDescription
			)
	END
END TRY
BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [TManual].[InsertPublicationNodeDetails]...';


GO

-- =============================================
--PROCEDURE: [TManual].[InsertTaskNodeDetails] 
--PURPOSE: Insert task node details to [TManual].[ST_Task_Node_Details]
--CREATED: Vyshna P 01/30/2018
-- ============================================= 

CREATE PROCEDURE [TManual].[InsertPublicationNodeDetails]
	@enginePublicationId	bigint,
	@chapterLevel			nvarchar(200),  
	@sectionLevel			nvarchar(200), 
	@pageBlockLevel		    nvarchar(200), 
	@functionalCode		    nvarchar(200), 
	@taskLevelNumber		nvarchar(200),
	@taskLeveName			nvarchar(200),
	@sequenceNumber			int,
	@isDrawingAvailable		bit,
	@issueDate				datetime,
	@syncDate				datetime

AS

	DECLARE @count bigint

BEGIN TRY
	SET @count = (SELECT COUNT(*) FROM [TManual].[ST_Publication_Node_Details] 
				  WHERE EnginePublicationId=@enginePublicationId
				 )

	IF(@count = 0)
	BEGIN
    
		INSERT INTO [TManual].[ST_Publication_Node_Details]
		(
			 EnginePublicationId
			,ChapterLevel
			,SectionLevel
			,PageBlockLevelName
			,FunctionalCode
			,TaskLevelNumber
			,TaskLevelName
			,SequenceNumber
			,IsDrawingAvailable
			,IssueDate
			,SyncDate
		)
		VALUES 
		(
			 @enginePublicationId
			,@chapterLevel
			,@sectionLevel
			,@pageBlockLevel
			,@functionalCode
			,@taskLevelNumber
			,@taskLeveName
			,@sequenceNumber
			,@isDrawingAvailable
			,@issueDate
			,@syncDate
		)
	END
END TRY
BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [TManual].[InsertEnginePublicationDetails]...';


GO

-- =============================================
--PROCEDURE: [TManual]].[InsertEnginePublicationDetails] 
--PURPOSE: Insert engine publication data to [TManual].[ST_Engine_Publication_Details]
--CREATED: Vyshna P 01/30/2018
-- ============================================= 

CREATE PROCEDURE [TManual].[InsertEnginePublicationDetails]
	@engineTypeId					int,
	@engineSeriesId					bigint,  
	@engineMarkId					bigint, 
	@enginePublicationShotName		nvarchar(50), 
	@enginePublicationLongName		nvarchar(20), 
	@enginePublicationDescription	nvarchar(50),
	@issueDate						datetime

AS
BEGIN TRY

	DECLARE @count int

	SET @count = (SELECT COUNT(*) FROM [TManual].[ST_Engine_Publication_Details] 
				  WHERE EngineTypeId=@engineTypeId
				   AND EngineSeriesId=@engineSeriesId
				   AND EngineMarkId =@engineMarkId
				 )  

	IF(@count=0)   
	BEGIN    
			INSERT INTO [TManual].[ST_Engine_Publication_Details]
			(
				 EngineTypeId
				,EngineSeriesId
				,EngineMarkId
				,EnginePublicationShotName
				,EnginePublicationLongName
				,EnginePublicationDescription
				,IssueDate
			)
			VALUES  
			(
				 @engineTypeId
				,@engineSeriesId
				,@engineMarkId
				,@enginePublicationShotName
				,@enginePublicationLongName
				,@enginePublicationDescription
				,@issueDate
			)
	END
END TRY
BEGIN CATCH
   EXECUTE [dbo].[LogError]
END CATCH
GO
PRINT N'Creating [dbo].[GetCredentialDetails]...';


GO

-- =============================================
-- Author:      Vyshna P
-- Create date: 07/02/2018
-- Description: Fetch all user credentials
-- =============================================
CREATE PROCEDURE [dbo].[GetCredentialDetails] 
     
AS

BEGIN
       
       SET NOCOUNT ON;

       BEGIN TRY
		   SELECT 
			   a.Id as UserId,
			   a.UserId as OracleUserId,
			   a.EmailAddress as EmailId,
			   b.RRCareID as RRCareID,
			   b.RRCarePassword as RRCarePassword,
			   b.CreatedDate as CreatedDate
              
		   FROM 
       
		   [RTMS.App].[Admin].[ST_Users] a INNER JOIN [RTMS.App].[Admin].[ST_User_RR_Credential] b on a.Id=b.UserId 
		   INNER JOIN [RTMS.App].[Admin].[OT_User_RR_Credential_Active] c on b.Id=c.RRCredentialId AND c.RRCredentialActive=1
		   WHERE c.RRCredentialActive=1            

		   END TRY

		   BEGIN CATCH
				  EXECUTE [dbo].[LogError]
	END CATCH
END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
